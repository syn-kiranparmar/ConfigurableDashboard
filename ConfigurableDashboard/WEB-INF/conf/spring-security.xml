<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">
 <!-- disable-url-rewriting=”true”  -->
	<http auto-config="true" create-session="ifRequired" >
		<intercept-url pattern="/admin**" access="ROLE_ADMIN" />
		<intercept-url pattern="/author**" access="ROLE_AUTHOR" />
		<intercept-url pattern="/policyHolder**" access="ROLE_POLICY_HOLDER" />
		<intercept-url pattern="/marketingPerson**" access="ROLE_MARKETING_PERSON" />
		
		<form-login 
		    login-page="/login" 
		    default-target-url="/checkPasswordExpired"
		    authentication-failure-handler-ref="authenticationFailureHandler" 
		    authentication-success-handler-ref="customAuthenticationSuccessHandler"
			username-parameter="username"
			password-parameter="password" />
		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID" />
		
		<remember-me 
    	    token-validity-seconds="1209600"
			remember-me-parameter="remember-me" 
			data-source-ref="dataSource"
			authentication-success-handler-ref="customAuthenticationSuccessHandler" />
		<csrf/>
		
    	<!-- 
    	
    	<session-management>
      		  <concurrency-control max-sessions="1" expired-url="/sessionExpired.html"/>
    	</session-management>
    	
    	custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/-->
    	
	</http>
 
	      <!-- beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
   			p:authenticationManager-ref="authenticationManager" /-->
	<!-- 
	 p:rememberMeServices-ref="rememberMeServices"
	p:authenticationFailureHandler-ref="authenticationFailureHandler"
    p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" 
	 -->
	
<!-- beans:bean id="authenticationManager"
    class="org.springframework.security.authentication.ProviderManager">
    <beans:property name="providers" ref="authProvider" /-->
    <!--beans:property name="jdbc-user-service" ref="authProvider" /-->
     
<!-- /beans:bean-->

 <authentication-manager >
	<authentication-provider user-service-ref="loginService">
	   <password-encoder hash="bcrypt" />   
	</authentication-provider>
  </authentication-manager>
 
  <!-- beans:bean id="encoder" 
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"-->
	<!-- >beans:constructor-arg name="strength" value="11" /-->
  <!-- /beans:bean-->
 
 <!-- beans:bean id="authProvider" 
	class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
	<beans:property name="userDetailsService" ref="loginService" />
	<beans:property name="passwordEncoder" ref="encoder" />
  </beans:bean-->
  
  
  <beans:bean id="authenticationFailureHandler"
		class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key="org.springframework.security.authentication.BadCredentialsException">/login?badCredentials</beans:prop>
				<beans:prop key="org.springframework.security.authentication.CredentialsExpiredException">/login?credentialsExpired</beans:prop>
				<beans:prop key="org.springframework.security.authentication.LockedException">/login?accountLocked</beans:prop>
				<beans:prop key="org.springframework.security.authentication.DisabledException">/login?accountDisabled</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	    
    
</beans:beans>  
